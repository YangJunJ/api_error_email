"""
Django settings for ApiErrorEmail project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4g63!ohjl@ln#m7*5_a6yb*3d6i04(k$)*zyca%53wwy!t@ypy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ApiErrorEmail.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ApiErrorEmail.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


import os
import sys
LOG_PATH = os.path.join(os.path.abspath(".."), "api_error_email_log")

if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)

def debug_filter(record):
    if record.levelname == 'DEBUG':
        return True
    return False


def info_filter(record):
    if record.levelname == 'INFO':
        return True
    return False


def warning_filter(record):
    if record.levelname == 'WARNING':
        return True
    return False


def verify_filter(record):
    if "cs verify" in record.getMessage():
        return True
    return False


# 日志内容输出格式模板
# 详细格式查阅文档 https://docs.python.org/zh-cn/3/library/logging.html#formatter-objects
LOG_FORMAT = '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d %(funcName)s]:%(message)s'


# django日志配置可以查阅：https://docs.djangoproject.com/zh-hans/5.0/howto/logging/#logging-how-to
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'default': {
            'format': LOG_FORMAT
        }
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'debug_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': debug_filter,
        },
        'info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': info_filter,
        },
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': warning_filter,
        },
        'verify_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': verify_filter,
        }
    },

    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'default'
        },
        'debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'debug_filter'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, "debug.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
        'verify': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'verify_filter'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, "verify.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
        'info': {
            'level': 'INFO',
            'filters': ['info_filter'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, "info.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
        'warning': {
            'level': 'WARNING',
            'filters': ['warning_filter'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, "warning.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, "error.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
        'error_email': {
            'level': 'ERROR',
            'host': "",
            'url': '',
            'class': 'log_tool.LogHTTPHandler',  # 这个日志处理类指定到我们重写的类里面
            'filename': os.path.join(LOG_PATH, "error.log"),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 10,
            'formatter': 'default',
            'encoding': 'utf-8'
        },
    },

    'loggers': {
        '': {
            'handlers': ['info', 'console', 'error', 'warning', 'debug', 'verify'],
            'level': 'DEBUG',
        },
        'error_email': {
            'handlers': ['info', 'console', 'error', 'warning', "error_email"],
            'level': 'DEBUG',
        }
    },
}


